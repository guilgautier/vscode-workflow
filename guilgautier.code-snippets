// CMD+Maj+P or View->Command palette->Preferences: Configure User Snippets
// An opinionated list of VS Code snippets used by Guillaume Gautier guilgautier https://guilgautier.github.io/
{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    // Text
    "my email": {
        "scope": "",
        "prefix": "myemail",
        "body": [
            "guillaume.gga@gmail.com"
        ],
        "description": ""
    },
    "my webpage": {
        "scope": "",
        "prefix": "mywebpage",
        "body": [
            "https://guilgautier.github.io"
        ],
        "description": ""
    },
    "my github": {
        "scope": "",
        "prefix": "mygithub",
        "body": [
            "https://github.com/guilgautier"
        ],
        "description": ""
    },
    "utf8": {
        "prefix": [
            "utf8"
        ],
        "body": [
            "# coding=utf-8"
        ],
        "description": "UTF-8 codding at beginning of file"
    },
    // ------------ //
    // Generic text //
    // ------------ //
    "i.e.,": {
        "scope": "", // "text,markdown,restructuredtext,latex,python,julia",
        "prefix": "ie",
        "body": [
            "i.e., $0"
        ],
        "description": ""
    },
    "e.g.,": {
        "scope": "", // "text,markdown,restructuredtext,latex,python,julia",
        "prefix": "eg",
        "body": [
            "e.g., $0"
        ],
        "description": ""
    },
    "see, e.g., ": {
        "scope": "", // "text,markdown,restructuredtext,latex,python,julia",
        "prefix": "seeeg",
        "body": [
            "see, e.g., $0"
        ],
        "description": ""
    },
    "cf. ": {
        "scope": "", // "text,markdown,restructuredtext,latex,python,julia",
        "prefix": "cf",
        "body": [
            "cf. $0"
        ],
        "description": ""
    },
    "w.r.t. ": {
        "scope": "", // "text,markdown,restructuredtext,latex,python,julia",
        "prefix": "wrt",
        "body": [
            "w.r.t. $0"
        ],
        "description": ""
    },
    "resp. ": {
        "scope": "", // "text,markdown,restructuredtext,latex,python,julia",
        "prefix": "resp",
        "body": [
            "resp. $0"
        ],
        "description": ""
    },
    "i.i.d. ": {
        "scope": "", // "text,markdown,restructuredtext,latex,python,julia",
        "prefix": "iid",
        "body": [
            "i.i.d. $0"
        ],
        "description": ""
    },
    // ------------------ //
    // Text documentation //
    // ------------------ //
    "bold font": {
        "scope": "python,restructuredtext,julia,markdown",
        "prefix": "bf",
        "body": [
            "**${TM_SELECTED_TEXT}$1**$0"
        ]
    },
    "italic font": {
        "scope": "python,restructuredtext,julia,markdown",
        "prefix": "it",
        "body": [
            "*${TM_SELECTED_TEXT}$1*$0"
        ]
    },
    "```language  ``` code block": {
        "scope": "julia,markdown",
        "prefix": "codeblock",
        "body": [
            "```${1:language}",
            "${TM_SELECTED_TEXT}$2",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    // -------------- //
    // LaTeX specific //
    // -------------- //
    "Citation reference": {
        "scope": "latex",
        "prefix": "cite",
        "body": [
            "\\\\${1|text,paren|}cite[${2:pre,}][${3:post}]"
        ],
        "description": ""
    },
    "Reference": {
        "scope": "latex",
        "prefix": "ref",
        "body": [
            "\\ref{$1}$0"
        ],
        "description": ""
    },
    "Clever Reference": {
        "scope": "latex",
        "prefix": "cref",
        "body": [
            "\\cref{$1}$0"
        ],
        "description": ""
    },
    "Equation reference": {
        "scope": "latex",
        "prefix": "eqref",
        "body": [
            "\\eqref{$1}$0"
        ],
        "description": ""
    },
    "Hyperlink reference": {
        "scope": "latex",
        "prefix": "href",
        "body": [
            "\\href{${1:link}}{${TM_SELECTED_TEXT}$2}$0"
        ],
        "description": ""
    },
    "Label reference": {
        "scope": "latex",
        "prefix": "lab",
        "body": [
            "\\label{${1:eq}:$2}"
        ],
        "description": ""
    },
    "Begin environment": {
        "scope": "latex",
        "prefix": "begin",
        "body": [
            "\\begin{${1:env}}",
            "\t$2",
            "\\end{${1:env}}"
        ],
        "description": ""
    },
    "Matrix": {
        "scope": "latex",
        "prefix": "bmat",
        "body": [
            "\\begin{${1:p/b/v/V/B/small}matrix}",
            "\t$0",
            "\\end{${1:p/b/v/V/B/small}matrix}"
        ],
        "description": ""
    },
    "Itemize environment": {
        "scope": "latex",
        "prefix": "bitemize",
        "body": [
            "\\begin{itemize}",
            "\t\\item ${TM_SELECTED_TEXT}$0",
            "\\end{itemize}"
        ],
        "description": "itemize environment"
    },
    "Enumerate environment": {
        "scope": "latex",
        "prefix": "benumerate",
        "body": [
            "\\begin{enumerate}",
            "\t\\item ${TM_SELECTED_TEXT}$0",
            "\\end{enumerate}"
        ],
        "description": "enumerate environment"
    },
    "Cases math environment": {
        "scope": "latex",
        "prefix": "bcases",
        "body": [
            "\\begin{cases}",
            "\t${TM_SELECTED_TEXT}${1} &\\text{if } $2 \\\\\\",
            "\t$3 &\\text{if } $4 \\\\\\",
            "\\end{cases}"
        ],
        "description": ""
    },
    "Align math environment with label": {
        "scope": "latex",
        "prefix": "balign",
        "body": [
            "\\begin{${1|align,align*|}}",
            "\\label{eq:$2}",
            "\t$3",
            "\t\t&= $4 \\\\\\ ",
            "\t\t&= $5",
            "\\end{${1|align,align*|}}"
        ],
        "description": ""
    },
    "Aligned equations in math environment with label": {
        "scope": "latex",
        "prefix": "bequtionaligned",
        "body": [
            "\\begin{equation}",
            "\\label{eq:$2}",
            "\t\\begin{aligned}",
            "\t\t&= \\\\\\",
            "\t\t&=",
            "\t\\end{aligned}",
            "\\end{equation}"
        ],
        "description": ""
    },
    "Equation math environment with label": {
        "scope": "latex",
        "prefix": "bequation",
        "body": [
            "\\begin{${1|equation,equation*|}}",
            "\\label{eq:$2}",
            "\t${TM_SELECTED_TEXT}$3",
            "\\end{${1|equation,equation*|}}"
        ],
        "description": ""
    },
    "Gather math environment with label": {
        "scope": "latex",
        "prefix": "bgather",
        "body": [
            "\\begin{${1|gather,gather*|}}",
            "\\label{eq:$2}",
            "\t${TM_SELECTED_TEXT}$3",
            "\\end{${1|gather,gather*|}}"
        ],
        "description": ""
    },
    "Figure environment with caption and label": {
        "scope": "latex",
        "prefix": "bfigure",
        "body": [
            "\\begin{${1|figure,figure*|}}",
            "\t\\includegraphics[width=\\linewidth]$2",
            "\t\\caption{$3}",
            "\\label{fig:$4}",
            "\\end{${1|figure,figure*|}}"
        ],
        "description": ""
    },
    "Frame environment": {
        "scope": "latex",
        "prefix": "bframe",
        "body": [
            "\\begin{frame}[${1:<from-to>[t,plain,noframenumbering,label=frame_label]}]\\frametitle{${2:title}} ",
            "\n$0\n",
            "\\end{frame}"
        ],
        "description": ""
    },
    "Corollary environment": {
        "scope": "latex",
        "prefix": "bcorollary",
        "body": [
            "\\begin{corollary}[${1:name}]",
            "\\label{coro:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t$0\n",
            "\\end{corollary}"
        ],
        "description": ""
    },
    "Definition environment": {
        "scope": "latex",
        "prefix": "bdefinition",
        "body": [
            "\\begin{definition}[${1:name}]",
            "\\label{def:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t$0\n",
            "\\end{definition}"
        ],
        "description": ""
    },
    "Example environment": {
        "scope": "latex",
        "prefix": "bexample",
        "body": [
            "\\begin{example}[${1:name}]",
            "\\label{ex:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t$0\n",
            "\\end{example}"
        ],
        "description": ""
    },
    "Lemma environment": {
        "scope": "latex",
        "prefix": "blemma",
        "body": [
            "\\begin{lemma}[${1:name}]",
            "\\label{ex:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t$0\n",
            "\\end{lemma}"
        ],
        "description": ""
    },
    "Proof environment": {
        "scope": "latex",
        "prefix": "bproof",
        "body": [
            "\\begin{proof}[${1:name}]",
            "\\label{proof:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t$0\n",
            "\\end{proof}"
        ],
        "description": ""
    },
    "Proposition environment": {
        "scope": "latex",
        "prefix": "bproposition",
        "body": [
            "\\begin{proposition}[${1:name}]",
            "\\label{prop:${2:${1/(\\w*)([\\s\\$\\{\\}\\(\\)]|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t$0\n",
            "\\end{proposition}"
        ],
        "description": ""
    },
    "Remark environment": {
        "scope": "latex",
        "prefix": "bremark",
        "body": [
            "\\begin{remark}[${1:name}]",
            "\\label{rmk:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\t${TM_SELECTED_TEXT}$0",
            "\\end{remark}"
        ],
        "description": ""
    },
    "Theorem environment": {
        "scope": "latex",
        "prefix": "btheorem",
        "body": [
            "\\begin{theorem}[${1:name}]",
            "\\label{th:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t$0\n",
            "\\end{theorem}"
        ],
        "description": ""
    },
    // Label treated with https://stackoverflow.com/questions/59759720/vs-code-snippets-regex-multiple-operations
    "Part with label": {
        "scope": "latex",
        "prefix": "part",
        "body": [
            "\\part{${1:part name}} % (fold)",
            "\\label{part:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t${TM_SELECTED_TEXT}$0\n",
            "% part ${2:part_name} (end)"
        ],
        "description": ""
    },
    "Chapter with label": {
        "scope": "latex",
        "prefix": "chapter",
        "body": [
            "\\chapter{${1:chapter name}} % (fold)",
            "\\label{ch:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t${TM_SELECTED_TEXT}$0\n",
            "% chapter ${2:chapter_name} (end)"
        ],
        "description": ""
    },
    "Section with label": {
        "scope": "latex",
        "prefix": "section",
        "body": [
            "\\section{${1:section name}} % (fold)",
            "\\label{sec:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t${TM_SELECTED_TEXT}$0\n",
            "% section ${2:section_name} (end)"
        ],
        "description": ""
    },
    "Subsection with label": {
        "scope": "latex",
        "prefix": "subsection",
        "body": [
            "\\subsection{${1:subsection name}} % (fold)",
            "\\label{sub:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t${TM_SELECTED_TEXT}$0\n",
            "% subsection ${2:subsection_name} (end)"
        ],
        "description": ""
    },
    "Subsubsection with label": {
        "scope": "latex",
        "prefix": "subsubsection",
        "body": [
            "\\subsubsection{${1:subsubsection name}} % (fold)",
            "\\label{ssub:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t${TM_SELECTED_TEXT}$0\n",
            "% subsubsection ${2:subsubsection_name} (end)"
        ],
        "description": ""
    },
    "Paragraph with label": {
        "scope": "latex",
        "prefix": "paragraph",
        "body": [
            "\\paragraph{${1:paragraph name}} % (fold)",
            "\\label{par:${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}}",
            "\n\t${TM_SELECTED_TEXT}$0\n",
            "% paragraph ${2:paragraph_name} (end)"
        ],
        "description": ""
    },
    // ------------------------------------------- //
    // LaTeX generic and use in code documentation //
    // ------------------------------------------- //
    "∞": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "oo",
        "body": [
            "\\infty$0"
        ],
        "description": "Infinity symbol"
    },
    "text": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "text",
        "body": [
            "\\text{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "text bold font": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "textbf",
        "body": [
            "\\textbf{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "text italic font": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "textit",
        "body": [
            "\\textit{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "and": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "and",
        "body": [
            "\\quad\\text{${1:and}}\\quad$0"
        ],
        "description": ""
    },
    "frac": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "frac",
        "body": [
            "\\frac{$1}{$2}$0"
        ],
        "description": ""
    },
    "square root √": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "sqrt",
        "body": [
            "\\sqrt{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "underbrace expression": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "underbrace",
        "body": [
            "\\underbrace{${TM_SELECTED_TEXT}$1}_{$2}$0"
        ],
        "description": ""
    },
    "overbrace expression": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "overbrace",
        "body": [
            "\\overbrace{${TM_SELECTED_TEXT}$1}^{$2}$0"
        ],
        "description": ""
    },
    "sum": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "sum",
        "body": [
            "\\sum_{${1:n=1}}^{${2:\\infty}}$0"
        ],
        "description": ""
    },
    "prod": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "prod",
        "body": [
            "\\prod_{${1:n=1}}^{${2:\\infty}}$0"
        ],
        "description": ""
    },
    "subscript": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "__",
        "body": "_{${TM_SELECTED_TEXT}$1}$0",
        "description": "subscript"
    },
    "superscript": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "**",
        "body": "^{${TM_SELECTED_TEXT}$1}$0",
        "description": "superscript"
    },
    "sub/super-script": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "__**",
        "body": [
            "_{$1}^{$2}$0"
        ],
        "description": ""
    },
    "≤": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "leq",
        "body": [
            "\\leq$0"
        ],
        "description": ""
    },
    "≥": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "geq",
        "body": [
            "\\geq$0"
        ],
        "description": ""
    },
    "Bar over expression": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "bar",
        "body": [
            "\\bar{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "Hat over expression": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "hat",
        "body": [
            "\\hat{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "Tilde over expression": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "tilde",
        "body": [
            "\\tilde{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "Sequence x_1, ..., x_n": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "seq",
        "body": [
            "${1:x}_{${2:1}}, \\dots, ${1:x}_{${3:N}}$0"
        ],
        "description": ""
    },
    "Curly braces {}": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "cb",
        "body": [
            "\\{${TM_SELECTED_TEXT}$1\\}$0"
        ],
        "description": ""
    },
    "Fraction": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "fraction",
        "body": [
            "\\frac{${1:num}}{${2:den}}$0"
        ],
        "description": ""
    },
    "Set {x_1, ..., x_n}": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "set",
        "body": [
            "\\left\\{${1:x}_{${2:1}}, \\dots, ${1:x}_{${3:N}}}\\right\\}$0"
        ],
        "description": ""
    },
    "Vector (x_1, ..., x_n)": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "vec",
        "body": [
            "\\left(${1:x}_{${2:1}}, \\dots, ${1:x}_{${3:N}}\\right)$0"
        ],
        "description": ""
    },
    "Int_{..}^{..} .. d.": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "int",
        "body": [
            "\\int_{$1}^{$2} $3 d$0"
        ],
        "description": ""
    },
    "Left-right parenthesis ( )": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "lrp",
        "body": [
            "\\left( ${TM_SELECTED_TEXT}$1 \\right)$0"
        ],
        "description": ""
    },
    "Left-right bracket [ ]": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "lrb",
        "body": [
            "\\left[ ${TM_SELECTED_TEXT}$1 \\right]$0"
        ],
        "description": ""
    },
    "Left-right scalar product < >": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "lrsp",
        "body": [
            "\\left\\langle ${TM_SELECTED_TEXT}$1 \\right\\rangle$0"
        ],
        "description": ""
    },
    "Left-right curly brackets { }": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "lrcb",
        "body": [
            "\\left\\{${TM_SELECTED_TEXT}$1 \\right\\}$0"
        ],
        "description": ""
    },
    "Left-right absolute value | |": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "lrabs",
        "body": [
            "\\left\\lvert ${TM_SELECTED_TEXT}$1 \\right\\rvert$0"
        ],
        "description": ""
    },
    "Left-right norm ‖ ‖": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "lrnorm",
        "body": [
            "\\left\\lVert ${TM_SELECTED_TEXT}$1 \\right\\rVert$0"
        ],
        "description": ""
    },
    "Left-right floor ⌊ ⌋": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "lrfloor",
        "body": [
            "\\left\\lfloor ${TM_SELECTED_TEXT}$1 \\right\\rfloor$0"
        ],
        "description": ""
    },
    "Math bold font": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "mbf",
        "body": [
            "\\mathbf{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "Math blackboard font": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "mbb",
        "body": [
            "\\mathbb{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "Math caligraphic font": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "mcal",
        "body": [
            "\\mathcal{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "Operatorname": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "operatorname",
        "body": [
            "\\operatorname{${TM_SELECTED_TEXT}$1}$0"
        ],
        "description": ""
    },
    "diag(x_1, ..., x_n)": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "diag",
        "body": [
            "\\operatorname{diag}\\left(${1:x}_{${2:1}}, \\dots, ${1:x}_{${3:n}}\\right)$0"
        ],
        "description": ""
    },
    "trace(..)": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "trace",
        "body": [
            "\\operatorname{trace}(${TM_SELECTED_TEXT}$1)$0"
        ],
        "description": ""
    },
    "Rank(..)": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "rank",
        "body": [
            "\\operatorname{rank}(${TM_SELECTED_TEXT}$1)$0"
        ],
        "description": ""
    },
    "Vandermonde matrix notation": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "vandermonde",
        "body": [
            "\\Delta\\left(${1:x}_{${2:1}}, \\dots, ${1:x}_{${3:n}}\\right)$0"
        ],
        "description": ""
    },
    "P[...]": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "proba",
        "body": [
            "\\mathbb{P}\\!\\left[ ${TM_SELECTED_TEXT}$1 \\right]$0"
        ],
        "description": ""
    },
    "E[...]": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "expectation",
        "body": [
            "\\mathbb{E}\\!\\left[ ${TM_SELECTED_TEXT}$1 \\right]$0"
        ],
        "description": ""
    },
    "Var[...]": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "variance",
        "body": [
            "\\mathbb{V}\\text{ar}\\left[ ${TM_SELECTED_TEXT}$1 \\right]$0"
        ],
        "description": ""
    },
    "Cov[...]": {
        "scope": "latex,python,restructuredtext,julia,markdown",
        "prefix": "covariance",
        "body": [
            "\\mathbb{C}\\text{ov}\\left[ ${TM_SELECTED_TEXT}$1 \\right]$0"
        ],
        "description": ""
    },
    // --------------- //
    // Python specific //
    // --------------- //
    "env3": {
        "scope": "python, restructuredtext",
        "prefix": [
            "env3",
            "#!3"
        ],
        "body": [
            "#!/usr/bin/env python3"
        ],
        "description": "Set shebang for Python 3"
    },
    "import ...": {
        "scope": "python, restructuredtext",
        "prefix": [
            "import"
        ],
        "body": [
            "import ${1:module} ${2:as ${3:alias}}$0"
        ],
        "description": ""
    },
    "from ... import ...": {
        "scope": "python, restructuredtext",
        "prefix": [
            "from"
        ],
        "body": [
            "from ${1:module} import ${0:feature}"
        ],
        "description": ""
    },
    "def function": {
        "scope": "python, restructuredtext",
        "prefix": [
            "def",
            "function",
            "deffunction"
        ],
        "body": [
            "def ${1:function_name}(${2:args}):",
            "\t$0"
        ],
        "description": ""
    },
    "class": {
        "scope": "python, restructuredtext",
        "prefix": "class",
        "body": [
            "class ${1:ClassName}(${2:object}):",
            "\tdef __init__(self, ${3:arg}):",
            "\t\t${4:super($1, self).__init__()}",
            "\t\tself.$3 = $3",
            "\t\t$0"
        ],
        "description": ""
    },
    "def method of class": {
        "scope": "python, restructuredtext",
        "prefix": [
            "method",
            "defmethod",
        ],
        "body": [
            "def ${1:function_name}(self, ${2:args}):",
            "\t$0"
        ],
        "description": ""
    },
    "@classmethod def": {
        "scope": "python, restructuredtext",
        "prefix": [
            "classmethod",
            "defclassmethod",
        ],
        "body": [
            "@classmethod",
            "def ${1:fname}(${2:args}):",
            "\t$0"
        ],
        "description": "https://docs.python.org/3/library/functions.html?#classmethod"
    },
    "@staticmethod def": {
        "scope": "python, restructuredtext",
        "prefix": [
            "staticmethod",
            "defstaticmethod",
        ],
        "body": [
            "@staticmethod",
            "def ${1:fname}(${2:args}):",
            "\t$0"
        ],
        "description": "https://docs.python.org/3/library/functions.html?#staticmethod"
    },
    "@property def": {
        "scope": "python, restructuredtext",
        "prefix": [
            "property",
            "defproperty",
        ],
        "body": [
            "@property",
            "def ${1:foo}(self):",
            "\t${2:return self._$1}",
            "@${4:$1}.setter",
            "def ${5:$1}(self, value):",
            "\t${6:self._$1} = value"
        ],
        "description": "New property: get and set via decorator https://docs.python.org/3/library/functions.html?#property"
    },
    "def pytest test": {
        "scope": "python",
        "prefix": [
            "pytest",
            "deftest",
        ],
        "body": [
            "def test_${1:description}():",
            "\tassert $2",
            "\t$0"
        ],
        "description": ""
    },
    "def pytest fixture": {
        "scope": "python",
        "prefix": [
            "pytestfixture",
            "deffixture",
            "fixture"
        ],
        "body": [
            "@pytest.fixture",
            "def ${1:fixture_name}():",
            "\treturn True",
            "\t$0"
        ],
        "description": "https://docs.pytest.org/en/6.2.x/fixture.html"
    },
    "def pytest": {
        "scope": "python, restructuredtext",
        "prefix": [
            "pytestparam",
            "defpytestparam",
        ],
        "body": [
            "@pytest.mark.parametrize(",
            "\t\"x, y, expected\",",
            "\t[",
            "\t(1, 2, 3),",
            "\t(2, 2, 4),",
            "\t]",
            ")",
            "def test_${1:sum}(x, y, expected):",
            "\tcomputed = x + y",
            "\tassert computed == expected",
            "\t$0"
        ],
        "description": "https://docs.pytest.org/en/6.2.x/parametrize.html"
    },
    "@decorator definition": {
        "scope": "python, restructuredtext",
        "prefix": "decorator",
        "body": [
            "import functools\n",
            "def decorator_name(func):",
            "\t@functools.wraps(func)",
            "\tdef wrapper_decorator(*args, **kwargs):",
            "\t\t# Do something before",
            "\t\tvalue = func(*args, **kwargs)",
            "\t\t# Do something after",
            "\t\treturn value",
            "\treturn wrapper_decorator",
            "\n# usage",
            "@decorator_name",
            "def function()",
            "\treturn None"
        ],
        "description": "@decorator https://realpython.com/primer-on-python-decorators/"
    },
    "if": {
        "scope": "python, restructuredtext",
        "prefix": "if",
        "body": [
            "if ${1:condition}:",
            "\t${2:pass/break}$0"
        ],
        "description": "if statement"
    },
    "elif": {
        "scope": "python, restructuredtext",
        "prefix": "elif",
        "body": [
            "elif ${1:condition}:",
            "\t${2:pass}$0"
        ],
        "description": "elif statement"
    },
    "else": {
        "scope": "python, restructuredtext",
        "prefix": "else",
        "body": [
            "else ${1:condition}:",
            "\t${2:pass}$0"
        ],
        "description": "else statement"
    },
    "if else": {
        "scope": "python, restructuredtext",
        "prefix": "ifelse",
        "body": [
            "if ${1:condition}:",
            "\t${2:pass}",
            "else ${3:condition}:",
            "\t${4:pass}$0"
        ],
        "description": "if else statement"
    },
    "if elif else": {
        "scope": "python, restructuredtext",
        "prefix": "ifelif",
        "body": [
            "if ${1:condition}:",
            "\t${2:pass}",
            "elif ${3:condition}:",
            "\t${4:pass}",
            "else:",
            "\t$0"
        ],
        "description": "if elif else statement"
    },
    "for loop": {
        "scope": "python, restructuredtext",
        "prefix": [
            "for"
        ],
        "body": [
            "for ${1:value} in ${2:iterable}:",
            "\t$0"
        ],
        "description": "for loop structure"
    },
    "Iterate dictionnary items": {
        "scope": "python, restructuredtext",
        "prefix": [
            "fordict",
            "itdict"
        ],
        "body": [
            "for key, val in ${1:dict}.items():",
            "\t$0"
        ],
        "description": "Iterate dictionnary items"
    },
    "enumerate": {
        "scope": "python, restructuredtext",
        "prefix": [
            "enumerate",
        ],
        "body": [
            "for idx, value in enumerate(${1:iterable}):",
            "\t$0"
        ],
        "description": "for loop structure"
    },
    "for loop else": {
        "scope": "python, restructuredtext",
        "prefix": [
            "forelse"
        ],
        "body": [
            "for ${1:value} in ${2:iterable}:",
            "\t${3:body}",
            "else:",
            "\t$0"
        ],
        "description": "for loop structure with else"
    },
    "while": {
        "scope": "python, restructuredtext",
        "prefix": [
            "while"
        ],
        "body": [
            "while ${1:condition}:",
            "\t$0"
        ],
        "description": "while loop structure"
    },
    "try:except:else:finally": {
        "scope": "python, restructuredtext",
        "prefix": "try",
        "body": [
            "try:",
            "\t${1:pass}",
            "except${2: ${3:Exception} as ${4:e}}:",
            "\t${5:raise}",
            "else:",
            "\t${6:pass}",
            "finally:",
            "\t${7:pass}$0"
        ],
        "description": "Code Snippet for a try/except/finally with else statement"
    },
    "if __name__ == \"__main__\"": {
        "scope": "python, restructuredtext",
        "prefix": "ifmain",
        "body": [
            "if __name__ == \"__main__\":",
            "\t${1:main()}$0"
        ],
        "description": "Create implicitly all the code at the top level using the __name__ special variable"
    },
    "with": {
        "scope": "python, restructuredtext",
        "prefix": [
            "with"
        ],
        "body": [
            "with ${1:expr}:",
            "\t$0"
        ],
        "description": ""
    },
    "def __init__": {
        "scope": "python, restructuredtext",
        "prefix": "definit",
        "body": [
            "def __init__(self, ${1:args}):",
            "\t${3:super().__init__()}",
            "\tself.$1 = $1",
            "\t$0"
        ],
        "description": ""
    },
    "testcase": {
        "scope": "python, restructuredtext",
        "prefix": "testcase",
        "body": [
            "class ${1:ExampleCase}(unittest.TestCase):",
            "",
            "\tdef test_${2:description}(self):",
            "\t\t$0"
        ],
        "description": ""
    },
    // ------------------------ //
    // Python-restructuredtext Sphinx documentation //
    // https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html
    // https: //www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-module
    // ------------------------ //
    "header 1 (part)": {
        "scope": "python,restructuredtext",
        "prefix": "header1, h1, part-header",
        "body": [
            ".. ${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}\n",
            "${1:part-name}",
            "${1/./#/g}",
            "\n$0"
        ],
        "description": [
            ".. part-label:\n",
            "part-name",
            "######"
        ]
    },
    "header 2 (chapter)": {
        "scope": "python,restructuredtext",
        "prefix": "header2, h2, chapter-header",
        "body": [
            ".. ${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}\n",
            "${1:chapter-name}",
            "${1/./*/g}",
            "\n$0"
        ],
        "description": [
            ".. chapter-label:\n",
            "chapter-name",
            "******"
        ]
    },
    "header 3 (section)": {
        "scope": "python,restructuredtext",
        "prefix": "header3, h3, section-header",
        "body": [
            ".. ${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}\n",
            "${1:section-name}",
            "${1/./=/g}",
            "\n$0"
        ],
        "description": [
            ".. section-label:\n",
            "section-name",
            "======"
        ]
    },
    "header 4 (subsection)": {
        "scope": "python,restructuredtext",
        "prefix": "header4, h4, subsection-header",
        "body": [
            ".. ${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}\n",
            "${1:subsection-name}",
            "${1/./-/g}",
            "\n$0"
        ],
        "description": [
            ".. subsection-label:\n",
            "subsection-name",
            "------"
        ]
    },
    "header 5 (subsubsection)": {
        "scope": "python,restructuredtext",
        "prefix": "header5, h5, subsubsection-header",
        "body": [
            ".. ${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}\n",
            "${1:subsubsection-name}",
            "${1/./^/g}",
            "\n$0"
        ],
        "description": [
            ".. subsubsection-label:\n",
            "subsubsection-name",
            "^^^^^^"
        ]
    },
    "header 6 (paragraph)": {
        "scope": "python,restructuredtext",
        "prefix": "header6, h6, paragraph-header",
        "body": [
            ".. ${2:${1/(\\w*)((\\s+)|(\\$)|(\\{)|(\\})|(\\W|$))/${1:/downcase}${3:+_}/g}}\n",
            "${1:paragraph-name}",
            "${1/./\"/g}",
            "\n$0"
        ],
        "description": [
            ".. paragraph-label:\n",
            "paragraph-name",
            "\"\"\"\"\""
        ]
    },
    ".. _label:": {
        "scope": "python,restructuredtext",
        "prefix": "label",
        "body": [
            ".. _${1:label-name}:",
        ],
        "description": ""
    },
    "``code``": {
        "scope": "python,restructuredtext",
        "prefix": "codeinline",
        "body": [
            "``${TM_SELECTED_TEXT}$1``$0"
        ],
        "description": ""
    },
    ":math:": {
        "scope": "python,restructuredtext",
        "prefix": "mathinline",
        "body": [
            ":math:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    // reference to code in docstrings
    ":py:attr:": {
        "scope": "python,restructuredtext",
        "prefix": "refattr",
        "body": [
            ":py:attr:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":py:class:": {
        "scope": "python,restructuredtext",
        "prefix": "refclass",
        "body": [
            ":py:class:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":py:const:": {
        "scope": "python,restructuredtext",
        "prefix": "refconst",
        "body": [
            ":py:const:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":py:data:": {
        "scope": "python,restructuredtext",
        "prefix": "refdata",
        "body": [
            ":py:data:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":py:exc:": {
        "scope": "python,restructuredtext",
        "prefix": "refexc",
        "body": [
            ":py:exc:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":py:func:": {
        "scope": "python,restructuredtext",
        "prefix": "reffunc",
        "body": [
            ":py:func:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":py:meth:": {
        "scope": "python,restructuredtext",
        "prefix": "refmeth",
        "body": [
            ":py:meth:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":py:mod:": {
        "scope": "python,restructuredtext",
        "prefix": "refmod",
        "body": [
            ":py:mod:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":py:obj:": {
        "scope": "python,restructuredtext",
        "prefix": "refobj",
        "body": [
            ":py:obj:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":cite:": {
        "scope": "python,restructuredtext",
        "prefix": "cite",
        "body": [
            ":cite:`${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    ":ref:": {
        "scope": "python,restructuredtext",
        "prefix": "ref",
        "body": [
            ":ref:`${TM_SELECTED_TEXT}${1:replacing-text} <${2:link-label}>`$0"
        ]
    },
    ":numref:": {
        "scope": "python,restructuredtext",
        "prefix": "numref",
        "body": [
            ":numref:`${TM_SELECTED_TEXT}$1 <$2>`$0"
        ]
    },
    ":eqref:": {
        "scope": "python,restructuredtext",
        "prefix": "eqref",
        "body": [
            ":eq:`eq:${TM_SELECTED_TEXT}$1`$0"
        ]
    },
    "link ref": {
        "scope": "python,restructuredtext",
        "prefix": "link",
        "body": [
            "`${TM_SELECTED_TEXT:text} <${1:link}>`_$0"
        ]
    },
    // docstring specification
    ":param X:": {
        "scope": "python,restructuredtext",
        "prefix": "param",
        "body": [
            ":param ${TM_SELECTED_TEXT}$1:",
            "\t$0"
        ]
    },
    ":type X:": {
        "scope": "python,restructuredtext",
        "prefix": "type",
        "body": [
            ":type ${TM_SELECTED_TEXT}$1:",
            "\t$0"
        ]
    },
    ":retrun:": {
        "scope": "python,restructuredtext",
        "prefix": "return",
        "body": [
            ":return:",
            "\t$0"
        ]
    },
    ":rtype:": {
        "scope": "python,restructuredtext",
        "prefix": "rtype",
        "body": [
            ":rtype:",
            "\t$0"
        ]
    },
    // directives
    // https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html
    // https://docutils.sourceforge.io/docs/ref/rst/directives.html
    ".. attention::": {
        "scope": "python,restructuredtext",
        "prefix": "attention",
        "body": [
            ".. attention::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. caution::": {
        "scope": "python,restructuredtext",
        "prefix": "caution",
        "body": [
            ".. caution::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. code-block::": {
        "scope": "python,restructuredtext",
        "prefix": "codeblock",
        "body": [
            ".. code-block:: python",
            "\t:caption: this.py",
            "\t:name: this-py",
            "\t:linenos:",
            "\t:linenos-start: 0",
            "\t:emphasize-lines:",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. danger::": {
        "scope": "python,restructuredtext",
        "prefix": "danger",
        "body": [
            ".. danger::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. deprecated::": {
        "scope": "python,restructuredtext",
        "prefix": "deprecated",
        "body": [
            ".. deprecated::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. error::": {
        "scope": "python,restructuredtext",
        "prefix": "error",
        "body": [
            ".. error::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. hint::": {
        "scope": "python,restructuredtext",
        "prefix": "hint",
        "body": [
            ".. hint::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. highlight::": {
        "scope": "python,restructuredtext",
        "prefix": "highlight",
        "body": [
            ".. highlight:: ${1:python}",
            "\t${2:linenothreshold:}",
            "\n\t${TM_SELECTED_TEXT}$0",
        ],
        "description": ""
    },
    ".. image::": {
        "scope": "python,restructuredtext",
        "prefix": "image",
        "body": [
            ".. image:: ${1:path_to_img.extension}",
            "\t:height: 100px",
            "\t:width: 200 px / 50% percentage current line width",
            "\t:scale: 100 %",
            "\t:alt: alternate text",
            "\t:align: top/middle/bottom/left/center/right",
        ],
        "description": ""
    },
    ".. important::": {
        "scope": "python,restructuredtext",
        "prefix": "important",
        "body": [
            ".. important::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. literalinclude:: file.py": {
        "scope": "python,restructuredtext",
        "prefix": "literalinclude",
        "body": [
            ".. literalinclude:: file.py",
            "\t:language: python",
            "\t:pyobject: object in file (Class.attr, Class.meth, func, ...)",
            "\t:lines: 1-",
            "\t:caption: this.py",
            "\t:name: this-py",
            "\t:linenos:",
            "\t:linenos-start: 0",
            "\t:emphasize-lines:",
        ],
        "description": ""
    },
    ".. math::": {
        "scope": "python,restructuredtext",
        "prefix": "mathblock",
        "body": [
            ".. math::",
            "\t:label: eq:${1:my-label}",
            "\n\t${TM_SELECTED_TEXT}$0",
        ],
        "description": ""
    },
    ".. note::": {
        "scope": "python,restructuredtext",
        "prefix": "note",
        "body": [
            ".. note::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. seealso::": {
        "scope": "python,restructuredtext",
        "prefix": "seealso",
        "body": [
            ".. seealso::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. tip::": {
        "scope": "python,restructuredtext",
        "prefix": "tip",
        "body": [
            ".. tip::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. toctree::": {
        "scope": "python,restructuredtext",
        "prefix": "toctree",
        "body": [
            ".. toctree::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. todo::": {
        "scope": "python,restructuredtext",
        "prefix": "todo",
        "body": [
            ".. todo::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    ".. warning::": {
        "scope": "python,restructuredtext",
        "prefix": "warning",
        "body": [
            ".. warning::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": ""
    },
    // matplotlib.sphinxext.plot_directive
    // https://matplotlib.org/stable/api/sphinxext_plot_directive_api.html
    ".. plot::": {
        "scope": "python,restructuredtext",
        "prefix": "docplot",
        "body": [
            ".. plot:: ${1:path_to_plot_file.py}",
            "\t:include-source: True",
            "\t:context: close-figs",
            "\t:caption: caption",
            "\t:height: 100px",
            "\t:width: 200 px / 50% percentage current line width",
            "\t:scale: 100 %",
            "\t:alt: alternate text",
            "\t:align: top/middle/bottom/left/center/right",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": [
            "https://matplotlib.org/stable/api/sphinxext_plot_directive_api.html"
        ],
    },
    // requires sphinx.ext.doctest in docs/conf.py
    // https://www.sphinx-doc.org/en/master/usage/extensions/doctest.html
    ".. doctest::": {
        "scope": "python,restructuredtext",
        "prefix": "doctest",
        "body": [
            ".. doctest::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": "requires sphinx.ext.doctest extension in docs/conf.py"
    },
    ".. testsetup::": {
        "scope": "python,restructuredtext",
        "prefix": "testsetup",
        "body": [
            ".. testsetup::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": "requires sphinx.ext.doctest in docs/conf.py"
    },
    ".. testcleanup::": {
        "scope": "python,restructuredtext",
        "prefix": "testcleanup",
        "body": [
            ".. testcleanup::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": "requires sphinx.ext.doctest in docs/conf.py"
    },
    ".. testcode::": {
        "scope": "python,restructuredtext",
        "prefix": "testcode",
        "body": [
            ".. testcode::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": "requires sphinx.ext.doctest in docs/conf.py"
    },
    ".. testoutput::": {
        "scope": "python,restructuredtext",
        "prefix": "testoutput",
        "body": [
            ".. testoutput::",
            "\n\t${TM_SELECTED_TEXT}$0"
        ],
        "description": "requires sphinx.ext.doctest in docs/conf.py"
    },
    // ---------------------------- //
    // Julia-Markdown documentation //
    // ---------------------------- //
    "`code`": {
        "scope": "julia,markdown",
        "prefix": "codeinline",
        "body": [
            "`${TM_SELECTED_TEXT}$1`$0"
        ],
        "description": ""
    },
    "julia>": {
        "scope": "julia,markdown",
        "prefix": "julia",
        "body": [
            "julia> $0"
        ],
        "description": ""
    },
    "~~": {
        "scope": "julia,markdown",
        "prefix": "strikethrough",
        "body": [
            "~~$1~~$0"
        ],
        "description": ""
    },
    "``": {
        "scope": "julia,markdown",
        "prefix": "lit",
        "body": [
            "`$1`$0"
        ],
        "description": ""
    },
    "[]()": {
        "scope": "julia,markdown",
        "prefix": "link",
        "body": [
            "[${TM_SELECTED_TEXT:text}](${1:link})$0"
        ],
        "description": ""
    },
    "![]()": {
        "scope": "julia,markdown",
        "prefix": "image",
        "body": [
            "![${TM_SELECTED_TEXT:text}](${1:image.png})$0"
        ],
        "description": ""
    },
    "---": {
        "scope": "julia,markdown",
        "prefix": "hrule",
        "body": [
            "---",
            "\n$0"
        ],
        "description": ""
    },
    "*/+/- item": {
        "scope": "julia,markdown",
        "prefix": "item",
        "body": [
            "${1:*/+/-}\r"
        ],
        "description": ""
    },
    "1./) item numbered list": {
        "scope": "julia,markdown",
        "prefix": "enum",
        "body": [
            "${1:1./)}\r"
        ],
        "description": ""
    },
    "```math```": {
        "scope": "julia,markdown",
        "prefix": "bequation",
        "body": [
            "```math",
            "\t${TM_SELECTED_TEXT}$0",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "[^number/name]": {
        "scope": "julia,markdown",
        "prefix": "footnote",
        "body": [
            "[^${1:number/name}]$0"
        ],
        "description": ""
    },
    "[^number/name]:": {
        "scope": "julia,markdown",
        "prefix": "footref",
        "body": [
            "[^${1:number/name}]: $0"
        ],
        "description": ""
    },
    "quote": {
        "scope": "julia,markdown",
        "prefix": "quote",
        "body": [
            "> ${TM_SELECTED_TEXT}$0"
        ]
    },
    "doc": {
        "scope": "julia,markdown",
        "prefix": "doc",
        "body": [
            "\"\"\"",
            "\t${1:name(args)}",
            "\n${2:documentation}",
            "\"\"\"$0"
        ]
    },
    "@doc raw": {
        "scope": "julia,markdown",
        "prefix": "docraw",
        "body": [
            "@doc raw\"\"\"",
            "\t${1:name(args)}",
            "\n${2:documentation}",
            "\"\"\"$0"
        ],
        "description": ""
    },
    // Admonitions
    "!!! attention": {
        "scope": "julia,markdown",
        "prefix": "attention",
        "body": [
            "!!! attention \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! caution": {
        "scope": "julia,markdown",
        "prefix": "caution",
        "body": [
            "!!! caution \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! danger": {
        "scope": "julia,markdown",
        "prefix": "danger",
        "body": [
            "!!! danger \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! error": {
        "scope": "julia,markdown",
        "prefix": "error",
        "body": [
            "!!! error \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! hint": {
        "scope": "julia,markdown",
        "prefix": "hint",
        "body": [
            "!!! hint \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! info": {
        "scope": "julia,markdown",
        "prefix": "info",
        "body": [
            "!!! info \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! important": {
        "scope": "julia,markdown",
        "prefix": "important",
        "body": [
            "!!! important \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! note": {
        "scope": "julia,markdown",
        "prefix": "note",
        "body": [
            "!!! note \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! seealso": {
        "scope": "julia,markdown",
        "prefix": "seealso",
        "body": [
            "!!! seealso \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! tip": {
        "scope": "julia,markdown",
        "prefix": "tip",
        "body": [
            "!!! tip \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! todo": {
        "scope": "julia,markdown",
        "prefix": "todo",
        "body": [
            "!!! todo \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    "!!! warning": {
        "scope": "julia,markdown",
        "prefix": "warning",
        "body": [
            "!!! warning \"${1:title}\"",
            "\n\t${TM_SELECTED_TEXT}$0",
            "$0"
        ],
        "description": ""
    },
    // Documenter blocs
    "@autodocs": {
        "scope": "julia,markdown",
        "prefix": "autodocs",
        "body": [
            "```@autodocs",
            "${1:Modules = [Foo]",
            "Pages   = [\"a.jl\", \"b.jl\"]",
            "Private = true",
            "Order = [:module, :constant, :type, :function, :macro]}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@contents": {
        "scope": "julia,markdown",
        "prefix": "contents",
        "body": [
            "```@contents",
            "${1:text}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@docs": {
        "scope": "julia,markdown",
        "prefix": "docs",
        "body": [
            "```@docs",
            "${1:text}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@delayed_example": {
        "scope": "julia,markdown",
        "prefix": "delayedexample",
        "body": [
            "```@example half-loop; continued = true",
            "for i in 1: 3",
            "\tj = i^2",
            "```",
            "Some text explaining what we should do with `j`",
            "```@example half-loop",
            "\tprintln(j)",
            "end",
            "```"
        ],
        "description": ""
    },
    "@example": {
        "scope": "julia,markdown",
        "prefix": "example",
        "body": [
            "```@example ${1:name/setup_name}",
            "${2:import Random # hide",
            "Random.seed!(1) # hide",
            "A = rand(3, 3)",
            "b = [1,2,3]",
            "A \\ b}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@eval": {
        "scope": "julia,markdown",
        "prefix": "eval",
        "body": [
            "```@eval",
            "${1:using PyPlot",
            "\n",
            "x = linspace(-π, π)",
            "y = sin(x)",
            "\n",
            "plot(x, y, color = \"red\")",
            "savefig(\"plot.svg\")",
            "\n",
            "nothing}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "Documented function": {
        "scope": "julia,markdown",
        "prefix": "fundoc",
        "body": [
            "@doc raw\"\"\"",
            "\t${1:name(args)}",
            "\n${2:documentation}",
            "\"\"\"",
            "function ${1:name(args)}",
            "\t${3:body}",
            "end",
            "$0"
        ],
        "description": ""
    },
    "@id": {
        "scope": "julia,markdown",
        "prefix": "id",
        "body": [
            "[${1:text}](@id ${1:id_name)"
        ],
        "description": ""
    },
    "@index": {
        "scope": "julia,markdown",
        "prefix": "index",
        "body": [
            "```@index",
            "${1:Pages   = [\"foo.md\"]",
            "Modules = [Foo, Bar]",
            "Order   = [:module,:constant,:type,:function,:macro]}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@meta": {
        "scope": "julia,markdown",
        "prefix": "meta",
        "body": [
            "```@meta",
            "${1:CurrentModule = FooBar",
            "DocTestSetup  = quote",
            "\tusing MyPackage",
            "end",
            "DocTestFilters = [r\"Stacktrace:[\\s\\S]+\"]",
            "EditURL = \"link/to/source/file\"}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@raw": {
        "scope": "julia,markdown",
        "prefix": "raw",
        "body": [
            "```@raw ${1:<format>}",
            "${2:text}",
            "```",
            "\n$0"
        ]
    },
    "@cite": {
        "scope": "julia,markdown",
        "prefix": "cite",
        "body": [
            "[${1:bibkey}](@cite)"
        ],
        "description": ""
    },
    "@ref": {
        "scope": "julia,markdown",
        "prefix": "ref",
        "body": [
            "[${1:id (`func`, Header)}](@ref)"
        ],
        "description": ""
    },
    "@repl": {
        "scope": "julia,markdown",
        "prefix": "repl",
        "body": [
            "```@repl ${1:name/setup_name}",
            "a = 1",
            "b = 2",
            "a + b",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@setup": {
        "scope": "julia,markdown",
        "prefix": "setup",
        "body": [
            "```@setup ${1:<name>}",
            "${2:using RDatasets",
            "using DataFrames",
            "iris = dataset(",
            "datasets",
            ",",
            "iris",
            ")}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    // Documenter doctest
    // https://juliadocs.github.io/Documenter.jl/stable/man/doctests/#Doctests
    "```jldoctest```": {
        "scope": "julia,markdown",
        "prefix": "doctest",
        "body": [
            "```jldoctest; output = true",
            "julia> ${1:input}",
            "${2:output}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "```jldoctest label```": {
        "scope": "julia,markdown",
        "prefix": "doctestlab",
        "body": [
            "```jldoctest ${1:label}; output = true",
            "julia> ${2:input}",
            "${3:error}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "```jldoctest error```": {
        "scope": "julia,markdown",
        "prefix": "doctesterr",
        "body": [
            "```jldoctest; output = true",
            "julia> ${1:input}",
            "ERROR: ${2:error}",
            "[...]",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@metatest": {
        "scope": "julia,markdown",
        "prefix": "metatest",
        "body": [
            "```@meta",
            "DocTestFilters = nothing",
            "DocTestSetup = quote",
            "\t${1:nothing}",
            "end",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "@testset": {
        "scope": "julia,markdown",
        "prefix": "testset",
        "body": [
            "@testset \"${1:test_name}\" begin",
            "\t${2:code}",
            "end",
            ""
        ],
        "description": ""
    },
    // Documenter LaTex
    "``math``": {
        "scope": "julia,markdown",
        "prefix": "mathinline",
        "body": [
            "``${TM_SELECTED_TEXT}$1``$0"
        ],
        "description": ""
    },
    "math equation": {
        "scope": "julia,markdown",
        "prefix": "bequation",
        "body": [
            "```math",
            "\t${TM_SELECTED_TEXT}$1",
            "```",
            "\n$0"
        ],
        "description": ""
    },
    "math align": {
        "scope": "julia,markdown",
        "prefix": "align",
        "body": [
            "```math",
            "\\begin{aligned}",
            "\t$1 &= $2 \\\\\\\\",
            "\t$3 &= $4",
            "\\end{aligned}",
            "```",
            "\n$0"
        ],
        "description": ""
    },
}
